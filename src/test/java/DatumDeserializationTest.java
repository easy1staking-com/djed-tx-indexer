import com.bloxbean.cardano.client.account.Account;
import com.bloxbean.cardano.client.api.util.ValueUtil;
import com.bloxbean.cardano.client.function.helper.SignerProviders;
import com.bloxbean.cardano.client.plutus.blueprint.PlutusBlueprintUtil;
import com.bloxbean.cardano.client.plutus.blueprint.model.PlutusVersion;
import com.bloxbean.cardano.client.plutus.spec.BigIntPlutusData;
import com.bloxbean.cardano.client.plutus.spec.BytesPlutusData;
import com.bloxbean.cardano.client.plutus.spec.ConstrPlutusData;
import com.bloxbean.cardano.client.quicktx.QuickTxBuilder;
import com.bloxbean.cardano.client.quicktx.ScriptTx;
import com.bloxbean.cardano.client.transaction.spec.Asset;
import com.bloxbean.cardano.client.transaction.spec.TransactionInput;
import com.bloxbean.cardano.client.transaction.spec.Value;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.cardanofoundation.conversions.CardanoConverters;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

@Slf4j
public class DatumDeserializationTest {

    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

    private Account account;

    private QuickTxBuilder quickTxBuilder;

    private CardanoConverters converters;

    @Test
    public void mint50Djed() throws Exception {

        account = new Account("test test test");

        var djedTicketMintingScript = PlutusBlueprintUtil.getPlutusScriptFromCompiledCode("59132c010000333233223233223232323232323232323232323232323222225335350042222222222222235353233017357420026ae84d5d10009aab9e375401e442466002006004446464646464646464646464646464a66a646464a66a666ae68cdc3a400000407407222440022a66a666ae68cdc3a400400407407222440042605a9201035054310035573c0046aae74004dd5010099919118011bab00130392233335573e0024c464a66a666ae68cdd79aab9d00100d03c03b132533533357346ae8cd5d100081e81e099299a999ab9a3371e9110f446a65644f726465725469636b657400375c6aae740040f80f44ccd5cd19b87375a6aae7800401c0f80f458d5d08008b1bab35573c002260086ae8800cd5d080101a9980098169bac3574201c90001aba100b13232323235323323335573e0024c464646464646464646464646464246666600200c00a0080060046464a66a666ae68d5d19aab9e00204c04b15335333573466e1d200000104c04b104b15335333573466e1d200200104c04b104c161635573a0026ea8014dd68029bad005375a00a6eb4014d5d09aba23574400a6ae84010d5d08021aba10043574200a6ae88d5d10009aba2001357440046aae78dd500081b9981e111999aab9f00126232325335333573466ebc004c94cd4ccd5cd19b8748008d55ce80082082009aba135573c0022c6ea801c1000fc4d55cf001098029aba200435573a0026ae840080e0dd59aba1357446ae8803488888c8c0048894cd4c0f0dd61aba101916221323232325335333573466e1d200235573a0020940922a66a666ae68cdc79bae357426aae780040d01281244c8d4c94cd4ccd5cd19b8748010d55ce800826025899191919191919299a999ab9a3370e90000030298290a99a999ab9a357466ae8800414c1484ccccc8888848ccccc00401801401000c008c8c8c8c8c8c94cd4ccd5cd19b874800001016416054cd4ccd5cd1aba3357440020b20b026400e6eb4d5d08008b0a99a999ab9a3370e900200202c82c0a99a999ab9a357466ae880041641604c801cdd69aba10011615335333573466e1d20080040590581533533357346ae8cd5d100082c82c0990039bad357420022c2a66a666ae68d5d180082c82c0a99a999ab9a3370e900100202c82c08030a99a999ab9a3370e900300202c82c08030b0b1aba2002375a6ae84004d55cf0011aab9d00137540026ae84014c8c8c8c8c8c94cd4ccd5cd19b874800001016416054cd4c0a000854cd4c09cd5d08008a99a999ab9a357466ae88004164160401858585858d5d10011baa357420026aae78008d55ce8009baa001357420086ae8400cd5d080119299a999ab9a3370e901c1b8d375c0020a80a620022c6ae840045858d5d10009aba2001357440026ae88004d55cf0011aab9d00137546ae84d55cf0008b1baa357420064444464646464a6466a666ae68cdc3a40000080aa0a8264a66a666ae68cdc4800a40000ac0aa26004c264a66a666ae68cdc3a4004660aaa66a666ae68cdc4000a40000ae0ac266e05200000110015335333573466e2000920000570561337029000001080102b82b0a99a999ab9a357466ae8801015c1584c00ccc1200040084c00d84c00d8dd69aba1004375a6ae840084c00588c8c004894cd406454cd4c060888d4008888d400888c94cd4c004894cd4ccd5cd199b950433371466e28c0c0c00c88008cdc5244101250030303003220013371466e29221015b0033714606000a66e29221012c003371460600089101015d0000600b06306215335333573466e24008cdc1240000020c40c62a66a666ae68cdc782200303183109a80c91299a999ab9a3371200e0040ca0c82666ae68cdc480080303283208320831083108310999ab9a3370e66e0400800c1001841804181401454cd54cd4cc144dd59aba102c0551622135002222533500415335333573466ebc00c0b817417054cd4ccd5cd19b8f48810f446a65644f726465725469636b657400375c0040ba0b82666ae68cdc3a40040020ba0b820b820b8442c264a66a666ae68cdc3a4004604a6eac00416416054cd4c94cd4c8c8c94cd4c0b000854cd4c0acd5d08008a99a999ab9a357466ae880041741704c8488c00800cd5d09aab9e00216161122001357440046ea8d5d08009aab9e375401c42666ae68cdd799299a999ab9a357466ae8800417016c4d5d08008b1bac00200105b05a163574205626a02e444a66a600e446a00a4464666ae68cdc380099b82003004061060337040080022a6466a666ae68cdc3a40000420ba0b8260020122a66a666ae68cdc3a40000400ba0b8264a66a6609600201426004014260040026609c04404226a0884464a66a666ae68cdc3a40000020c00be26ac4464a66a660a000201e2600e01e2600e002660a866e0809c0080044d4cc13800800488c94cd4cc14000403c4c01c03c4c01c004cc150cdc101380100099b820230022350012232332333353232325335333573466e1d200000206406313232323212222233004007006375a0046eb4008d5d09aba2002357420022a66a666ae68cdc3a40040040c80c6264244444600200c6eb4d5d08008a99a999ab9a3370e9002001032031899191919091111198028038031bad002375a0046ae84d5d10011aba100115335333573466e1d20060020640631321222223002006375a6ae8400454cd4ccd5cd19b874802000819018c4c8c8c8c8488888cc00c01c018dd68011bad002357426ae88008d5d08008982ba481035054310035573c0046aae74004dd500b111a824111aa802911919191805a99a999ab9a3371066e080080200041a41a84cccccccc0c00cc0480200200b120004800002441a4cdc100400119b820040023370400800444646a09644646464a6466a666ae68cdc419b8200300200406a069130013370090010010980080111805a99a999ab9a3370e0100020d40d226666666606006602401001005890002400001220d266e10008004cdc100100819b820020033370400401a446a08e446aa00a446464646a0a04464646460206666666606a07002e9000000818807006a99a999ab9a3371201c01a0de0dc201c201a66e10cdc019b823370401a00400c66e08014004cdc100080319b8200200f3370400401e66e0801c008cdc100200119b820040022350462235500422323232300a3333333302f032011480000040ad20000080083370866e0801c008004cdc100200119b8200400213232533001100e13232533003161330520013370400c04e66e04cdc101400280099b82026005533357340020c20c066e1d20000232350472232323230073333333302c02f00e480000040a001920000063370866e08014008004cdc100100319b8200200625335001153353235017225335333573466e1d20c0fc15337020020040c60c42666ae68cdc380080183183108311bad01215335333573466e1d200235573a6ea8d5d09aba201806005f1333573466ebc0440c418017c585858585858d5d08088b0b0b28009aba200135573c0046aae74004dd5001981d1aba101d161637546ae84d55cf1baa357420066ae88004d5d10009aab9e3754004a66464608644a66a0022c4426a004446a0024444a66a666ae68cdc3a400460166eac00c13012c4c94cd4ccd5cd19b8748010d55ce800826826099199199aab9f001262323232323212333001004003002357426ae88010cc8ccd55cf80093119191919191919091998008020018011bae357426ae88010c128008cc128dd69aba1004375a6ae8400cd5d08009aba2004357440026aae78dd51aba100235573c6ea8008138dd71aba1004357420026ae88008d55cf1baa001049357426aae7800458dd5001098050039821111999aab9f0012480008c94cd4ccd5cd19baf35573a00200a08a0882646607691010d446a65644f7261636c654e46540000137566aae780044c010d5d10019aba100203e375203c01044444444a66a666ae68cdc4800a40000840822c26464a66a666ae68cdc400099b80337000106a03e446464a66a666ae68cdc419b82003001002048047132333019026025001337009001000899980c01281200099b840010023370401200400c0880862c2a66a6608a446666aae7c00494cd4ccd5cd19b874800002011c1184ccd5cd19b874800001c11c11841188c94cd4ccd5cd19baf35573a00201c09008e264a66a666ae68cdc39981f0160008050248240999ab9a3370e6607c05600201209209020906eacd55cf000898021aba20033574200408200426608a446666aae7c004811c8c94cd54cd4ccd5cd19baf00100e048047104815335333573466ebc00406412011c41204ccd5cd19baf4c0101400000104804713004357440062c6aae74d5d08010208010b181b8009bab0073303a2253350011622135002223500122225335333573466e1d2002330442233335573e00249000119299a999ab9a3375e6aae7400404011c1184c8cc0f522111446a6564537461626c65436f696e4e46540000137566aae780044c010d5d10019aba1002040375600608608420042601400e002605e6eb0d5d08071ba9011303722253350021337029000000910991980300119b80004001300637566ae84d5d11aab9e37546ae84d5d11aab9e3754004606c446666aae7c004920002325335333573466ebcd55ce80080501c81c09919817a4410f446a65644f726465725469636b65740000137566aae780044c010d5d10019aba100203230352233335573e00249000119299a999ab9a3375e6aae740040240e00dc4c8cc0b92210f446a65644f726465725469636b65740000137566aae780044c010d5d10019aba100203125335333573466e2000520000340331337169001181019b8148000cdc024004002266e2d2000302000123232325335333573466e1d20000010360351323232533533357346ae8cd5d100281c81c0a99a999ab9a3370e90001aab9d0030390381533533357346ae8cd5d100101c81c0a99a9804000881c8a99a99299a999ab9a3370e90011aab9d00203a0391533533357346ae8cd5d100081d01c8a99a999ab9a3370e901c1b8d375c6ae840040e80e440e8585840e4d55cf000881c8b0b0b0b1baa357420026aae78004dd51aba100215335333573466e1d20020010360351533533357346ae8c0080d80d440d85858d55ce8011aab9e0013754002464a66a666ae68cdc3a40006aae740080cc0c854cd4ccd5cd1aba3357440020660642a66a666ae68cdc3a40706e34dd71aba100103303210331616103235573c002444a66a666ae68cdc480180081901988018a99a999ab9a337120040020640662002200464a66a666ae68cdc3a40006aae740040c00bc4d5d09aab9e00116375400e6ae88004d5d11aba2357440026ae88d5d10009aba2001357440026aae78dd50010a4c2601892103505435003015225335333573466e2000520800401601513371600291010013371666e18005208004300233706002904002111a801111a8019119199ab9a3371200266e0800c010064068cdc1002000911aa99a999ab9a33710002900000a00989980199b8148000008cdc0a400000226600600400244660100040024424660020060044664666aae7c004988c8c8c8c848cc00400c008c00800cc004d5d08021199199aab9f001262325335333573466e1d200235573a00203002e26eb4d5d09aab9e0011637546ae84008d55cf1baa001010357426ae88008d55cf1baa00100c225335333573466e1d2000001011010161330030020012212330010030022326335738002012601a446666aae7c004920002325335333573466ebd30101400035573a00202001e2646600c9110000137566aae780044c010d5d10019aba1002009300c22233335573e00249000119299a999ab9a3371e6eb8d55ce80080200800789bad35573c00226600a0086ae8800cd5d08010049805911999aab9f001200a23350093574200460066ae8800801cc02888cccd55cf8009004919a80419199109198008018011aba100132323233332222123333001005004003002357420066ae84008d5d08009aba1357440026ae88004d5d10009aab9e37546ae84d5d10009aab9e37546ae84008c00cd5d10010031804911999aab9f001200823350073574200460066ae88008014c020888cccd55cf80110011198021aba2003323233300735573a0040080026eacd55cf0009aba10030053007222233335573e00240064646466600e00ca66a666ae68cdc3a400000201a018200a266a01264246660020100040066aae74008014d5d10021bad35573c0026ae8400801448004488008488488cc00401000cc00c8894cd4ccd5cd19b874800000401401040084cc00c004cdc2801000891001091000919180080091801119801001000999a8911999999999999a8a8a8a8a8a8a899a8910011111111111111109199999999999998008078070068060058050048040038030028020018011000998012412c06904801998012411406904801998012412c06904801998012411406904801a450c446a65644d6963726f5553440048810c5368656e4d6963726f555344004881035553440048812051f4ed3fc62618d6cc2a29f50efb6c8fbf4a6e65a02d90b9eae4a1196bafcb550048303b9b52211c815aca02042ba9188a2ca4f8ce7b276046e2376b4bce56391342299e004838353d0112080e1eb17330024800920a006221233001003002200148811c8db269c3ec630e06ae29f74bc39edd1f87c819f1056206e879a1cd610048811c021a32ee5621d4e94df1d9bef6baa284a7cc75ba51bb5fb804c6c4710001", PlutusVersion.v2);

        var address = account.getBaseAddress();
        var paymentCredentials = address.getPaymentCredential().get();
        var stakingCredentials = address.getDelegationCredential().get();

        var adaAmount = 1L;
        var adaToSpend = Value.fromCoin(BigInteger.valueOf(100_000_000L));


        var djedAmount = 1L;
        var djedAmountToBuild = Value.builder().build();

        var requestedDjedData = ConstrPlutusData.of(0,
                BigIntPlutusData.of(BigInteger.valueOf(djedAmount)),
                BigIntPlutusData.of(BigInteger.valueOf(adaAmount))
        );

        var userAddressData = ConstrPlutusData.of(0,
                ConstrPlutusData.of(0, BytesPlutusData.of(paymentCredentials.getBytes())),
                ConstrPlutusData.of(0,
                        ConstrPlutusData.of(0,
                                ConstrPlutusData.of(0, BytesPlutusData.of(stakingCredentials.getBytes())))
                )
        );

        var oraclePriceData = ConstrPlutusData.of(0, BigIntPlutusData.of(5000),
                BigIntPlutusData.of(3147));

        var threeMinutesFromNow = LocalDateTime.now(ZoneOffset.UTC).plusMinutes(3L).toEpochSecond(ZoneOffset.UTC) * 1000L;

        var djedTicketMintPolicyId = "04ea363a127872366ef2d3186325a25a5cee8826ff8a79dc7c8fa671";

        var datum = ConstrPlutusData.of(0, requestedDjedData,
                userAddressData,
                oraclePriceData,
                BigIntPlutusData.of(threeMinutesFromNow),
                BytesPlutusData.of(djedTicketMintPolicyId)
        );
//        var djedTicketAssetName = Asset.builder().name("0x" + "446a65644f726465725469636b6574").build();
        var djedTicketAssetName = Asset.builder().name("DjedOrderTicket").value(BigInteger.ONE).build();

        // Only in java this is not required as CCL always attaches the minting scripts
//        var mintScriptRefInput = TransactionInput.builder().transactionId("1a757d9840dfd77f5aa0223245b553d412328dadb10abc5225f4f8e53ae90ee0").index(1).build();
        var oracleRefInput = TransactionInput.builder().transactionId("57be65c9283be06f38da5eeabc372d121ee419bca5e5b386ec670f819fb07e02").index(0).build();
        var poolRefInput = TransactionInput.builder().transactionId("8d99e6b11ea3b52dfaee4507a7cadde12c3101277d0bf77f6a03bb0e55938089").index(0).build();

        var tx = new ScriptTx()
                .payToContract("addr1wypp5vhw2csaf62d78vmaa4652z20nr4hfgmkhacqnrvgug2vdyq4", ValueUtil.toAmountList(adaToSpend), datum)
                .mintAsset(djedTicketMintingScript, djedTicketAssetName, ConstrPlutusData.of(0))
//                .readFrom(mintScriptRefInput)
                .readFrom(oracleRefInput)
                .readFrom(poolRefInput)
                .withChangeAddress(account.baseAddress());

        var nowSlot = converters.time().toSlot(LocalDateTime.now(ZoneOffset.UTC));

        quickTxBuilder.compose(tx)
                .withSigner(SignerProviders.signerFrom(account))
                .withRequiredSigners(account.getBaseAddress())
                .validFrom(nowSlot - 60)
                .validTo(nowSlot + 180)
                .completeAndWait();


    }


}
